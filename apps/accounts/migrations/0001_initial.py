# Generated by Django 4.2 on 2025-09-09 19:30

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('etablissements', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('directeur', "Directeur d'établissement"), ('enseignant', 'Enseignant'), ('rectorat', 'Personnel rectorat'), ('admin', 'Administrateur système')], default='enseignant', max_length=20)),
                ('telephone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Format de téléphone invalide', regex='^\\+?1?\\d{9,15}$')])),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('adresse', models.TextField(blank=True)),
                ('ville', models.CharField(blank=True, max_length=100)),
                ('code_postal', models.CharField(blank=True, max_length=10)),
                ('pays', models.CharField(default='France', max_length=100)),
                ('date_embauche', models.DateField(blank=True, null=True)),
                ('statut', models.CharField(choices=[('actif', 'Actif'), ('inactif', 'Inactif'), ('suspendu', 'Suspendu')], default='actif', max_length=20)),
                ('preferences_notifications', models.JSONField(blank=True, default=dict, null=True)),
                ('derniere_connexion', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProfilRectorat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_agent', models.CharField(max_length=20, unique=True)),
                ('service', models.CharField(max_length=100)),
                ('niveau_acces', models.CharField(choices=[('agent', 'Agent'), ('chef_service', 'Chef de service'), ('inspecteur', 'Inspecteur'), ('recteur', 'Recteur')], max_length=20)),
                ('academie', models.CharField(max_length=100)),
                ('permissions_systeme', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('etablissements_suivis', models.ManyToManyField(blank=True, related_name='personnel_rectorat', to='etablissements.etablissement')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profil_rectorat', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Rectorat',
                'verbose_name_plural': 'Profils Rectorat',
                'db_table': 'profils_rectorat',
            },
        ),
        migrations.CreateModel(
            name='ProfilEnseignant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_enseignant', models.CharField(max_length=20, unique=True)),
                ('specialite', models.CharField(max_length=100)),
                ('niveau_enseignement', models.CharField(choices=[('maternelle', 'Maternelle'), ('primaire', 'Primaire'), ('college', 'Collège'), ('lycee', 'Lycée'), ('superieur', 'Supérieur')], max_length=20)),
                ('heures_max_semaine', models.PositiveIntegerField(default=35)),
                ('heures_max_jour', models.PositiveIntegerField(default=8)),
                ('disponibilites', models.JSONField(blank=True, default=dict)),
                ('contraintes', models.JSONField(blank=True, default=list)),
                ('competences', models.JSONField(blank=True, default=list)),
                ('experience_annees', models.PositiveIntegerField(default=0)),
                ('formation_continue', models.JSONField(blank=True, default=list)),
                ('notes_evaluation', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profil_enseignant', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Enseignant',
                'verbose_name_plural': 'Profils Enseignants',
                'db_table': 'profils_enseignants',
            },
        ),
        migrations.CreateModel(
            name='ProfilDirecteur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_directeur', models.CharField(max_length=20, unique=True)),
                ('date_nomination', models.DateField()),
                ('autorites_hierarchiques', models.JSONField(blank=True, default=list)),
                ('permissions', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('etablissement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='directeurs', to='etablissements.etablissement')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profil_directeur', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Directeur',
                'verbose_name_plural': 'Profils Directeurs',
                'db_table': 'profils_directeurs',
            },
        ),
    ]
